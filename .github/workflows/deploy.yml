name: Cria√ß√£o de inst√¢ncias na Azure         # Nome do workflow

on:
  push:                                      # Dispara em push para a branch main
    branches: [main]
  pull_request:                              # Tamb√©m dispara em PRs para a main
    branches: [main]
  workflow_dispatch:                         # Pode ser executado manualmente pelo GitHub UI

env:
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  ACR_NAME: ${{ secrets.ACR_NAME }}

jobs:
  test:
    name: Testar aplica√ß√£o
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: azure/ci-cd  
    
    steps:
    - name: Baixar c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: 'azure/ci-cd/package-lock.json' 
    
    - name: Instalar depend√™ncias
      run: npm ci
    
    - name: Executar testes
      run: npm test
    
    - name: Testar build do Docker
      run: |
        docker build -t test-build .
        echo "Build Docker realizado com sucesso!"

  deploy:
    name: Fazer deploy no Azure
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'  # S√≥ faz deploy a partir da branch main
    
    defaults:
      run:
        working-directory: azure/ci-cd 
    
    steps:
    - name: Baixar c√≥digo
      uses: actions/checkout@v4
    
    - name: Autenticar no Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Build e push da imagem Docker
      id: build-image
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        APP_NAME="meuapp-$TIMESTAMP"
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        echo "app-name=$APP_NAME" >> $GITHUB_OUTPUT
        
        az acr login --name $ACR_NAME
        
        docker build -t $APP_NAME .
        
        IMAGE_TAG="${ACR_NAME}.azurecr.io/${APP_NAME}:latest"
        docker tag $APP_NAME $IMAGE_TAG
        docker push $IMAGE_TAG
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Criar container no Azure
      run: |
        az container delete \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $APP_NAME \
          --yes || true
        
        az container create \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $APP_NAME \
          --image ${{ steps.build-image.outputs.image-tag }} \
          --registry-login-server ${ACR_NAME}.azurecr.io \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --dns-name-label $APP_NAME \
          --os-type Linux \
          --ports 3001 \
          --environment-variables NODE_ENV=production \
          --cpu 1 \
          --memory 1.5 \
          --restart-policy Always \
          --location "East US"
    
    - name: Obter URL da aplica√ß√£o
      run: |
        echo "Aguardando container iniciar..."
        sleep 30
        
        FQDN=$(az container show \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $APP_NAME \
          --query ipAddress.fqdn \
          --output tsv)
        
        if [ "$FQDN" != "" ] && [ "$FQDN" != "null" ]; then
          echo ""
          echo "üöÄ Deploy realizado com sucesso!"
          echo "üì± Sua aplica√ß√£o est√° dispon√≠vel em: http://$FQDN:3001"
          echo "üè• Health check: http://$FQDN:3001/health"
          echo "üìä API endpoint: http://$FQDN:3001/api/info"
          echo ""
          echo "üìã Links no portal Azure:"
          echo "Resource Group: https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$AZURE_RESOURCE_GROUP"
          echo "Container Instance: https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$AZURE_RESOURCE_GROUP/providers/Microsoft.ContainerInstance/containerGroups/$APP_NAME"
          echo ""
        else
          echo "‚ùå N√£o foi poss√≠vel obter o FQDN do container. Verifique no portal do Azure."
        fi
